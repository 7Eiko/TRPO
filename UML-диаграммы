#1
@startuml
:Разработчик: -left-> (Боевая система)
:Разработчик: --> (Триггер)
:Разработчик: -down-> (Предусловие)
:Разработчик: -up-> (Постусловие)
:Разработчик: -down-> (Сценарий исключительных ситуаций)
:Разработчик: -right-> (Альтернативный сценарий)
:Разработчик: --> (Основной сценарий)
(Боевая система) -left-> (Приоритет: Важно)
(Триггер) --> (Нажатие ЛКМ)
(Предусловие) --> (У пользователя должен быть ПК)
(Постусловие) -up-> (После успешного выполнения атаки, противник получает урон)
(Сценарий исключительных ситуаций) -down-> (Анимация выполнилась, но урон по врагу не прошёл)
(Альтернативный сценарий) -right-> (Анимация может выполнится, но играх может не попасть по врагу)
(Основной сценарий) --> (При нажатии на кнопку выполняется анимация атаки)
(Основной сценарий) --> (Скрипт присвоенный врагу срабатывает и враг получает)
@enduml


#2
@startuml
user << Игрок >>
user --> (Выбор игрового меню) : Запуск игры
(Выбор игрового меню) --> (Начать новую игру)
(Выбор игрового меню) --> (Продолжить игру)
(Выбор игрового меню) --> (Настройки)
(Выбор игрового меню) --> (Выход)
(Начать новую игру) --> (Выбор ячейки\nсохранения)
(Продолжить игру) --> (Выбор ячейки\nсохранения)
(Настройки) --> (Изменеие громкости\nзвуков в игре)
(Настройки) --> (Изменеие громкости\nмузыки в игре)
(Настройки) --> (Изменеие яркости\nв игре)

user -> (Взаимодействие с врагами) : Нажатие кнопки атаки
(Взаимодействие с врагами) -> (Нанесение урона врагам)
(Взаимодействие с врагами) -down-> (Получение урона от врагов) : Игрок промахнулся
(Взаимодействие с врагами) -down-> (Возможность избежать\nполучение урона от врагов) : Нажать на клавишу Shift

user -up-> (Взаимодействие с мирными NPC) : игрок подходит\nк ключевому NPC
(Взаимодействие с мирными NPC) -> (Использование системы диалогов) : нажать на клаившу E

user -left-> (Переход между уровнями) : Если игрок дошёл\nдо ключевой точки
user -up-> (Передвижение персонажа) : Нажатие на\nкнопки WASD
@enduml


#3
@startuml
(*)
->
:Нажатие на ЛКМ;
if () then
->:Кнопка не нажата;
:;
else
->:Кнопка нажата;
:Выполняется анимация атаки;
if () then
->:Игрок попал по врагу;
:Игрок наносит урон;
:Враг погиб;
else
->:Игрок промахнулся;
if () then
-> Игрок не увернулся от удара;
:Игрок получает урон;
else
->Нажата кнопка LeftShift;
:Игрок увернулся;
endif
endif
endif
:Игрок возвращается в анимацию покоя;
->
(*)
@enduml


#4
@startuml
start
->
:нажатие на клавишу E;
if () then
->:Кнопка\nне нажата;
:;
else
->:Кнопка нажата;
if () then
->:Персонаж\nотошёл от NPC;
else
->:;
:Диалоговое окно открывается;
repeat
->:Повторное нажатие\nна клавишу E;
:Текст в диалоговом окне меняется;
repeat while()
endif
endif
:Диалоговое окно закрывается;
stop
@enduml


#5
@startuml
node "Weaken" {
[Unity] <|-- [C#]
[Unity] <|-- [Aseprite]
[Лаунчер] <|--[Unity]
}
@enduml


#6
@startuml
Class "PLAYER_CONTROLLER" {
Walk
Flip
Jump
Lounge 
Crouch
Sprint
WallJump
GroundCheck
WallCheck
MoveOnWall
Attack

Метод движения персонажа с помощью стика()
Метод в котором осуществляется обращение к аниматору персонажа \nдля того чтобы он смотрел в сторону, в которую смотрит()
Метод в котором описан прыжок персонажа()
Метод в котором описан рывок персонажа()
Метод в котором описано приседание персонажа()
Метод в котором описано ускорение персонажа()
Метод в котором описаны прыжки от стен()
Метод в котором проверяться - на земле персонаж или нет()
Метод в котором проверяться - на стене персонаж или нет()
Метод в котором описано передвижение персонажа по стенам()
Метод в котором описана атака персонажа()

}

Class "HEALTH"{
StartHealth
HealthBar
CurrentHealth
TakeDamage
Die

Метод для изначального здоровья для персонажа()
Метод отображаения здоровья персонажа()
Метод определения текущего здоровья персонажа()
Метод для получения урона персонажем()
Метод, в котором персонаж погибает()
}

Class "Enemy"{
Walk 
Flip
DamagePlayer
Attack

Метод движения врага()
Метод, в котором осуществляется обращение к аниматору врага для того чтобы он смотрел в ту сторону, в которую идёт()
Метод, в котором проверяется - находится ли игрок в поле зрения врага() 
Метод, в котором описана атака врага()   
}

Class "Dialogue_System"{
OnTriggerEnter2D
OnTriggerExit2D
Update

Метод в котором реализовано отображение диалогового окна когда игрок находится в поле зрения диалоговой системы()
Метод в котором реализовано исчезновение диалогового окна когда игрок выходит из поля зрения диалоговой системы()
Функция отображения диалогового окна на нажатие клавиши Е()
}

Class "Scene_Switch"{
OnTriggerEnter2D
ChangeLocation

Метод, в котором проверяется находится ли игрок в поле зрения смены сцены()
Метод смены локации()
}

Class "Main_Menu"{
PlayGame
Exit

Метод для начала игры()
Метод для выхода из игры()
}

Class "Load_Screen"{
Loading
LoadSync

Метод отображения загрузочного экрана()
IEnumerator, в котором реализована загрузка следующей локации()
}

PLAYER_CONTROLLER -[dashed]- HEALTH
PLAYER_CONTROLLER -[dashed]- Enemy
PLAYER_CONTROLLER -[dashed]- Dialogue_System
PLAYER_CONTROLLER -[dashed]- Scene_Switch
HEALTH -[dashed]- Enemy
Scene_Switch -[dashed]- Load_Screen
Main_Menu  -[dashed]-  Load_Screen
@enduml
